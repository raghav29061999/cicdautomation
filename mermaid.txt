LangGraph – Adding Memory to Agents
🧠 What is LangGraph?
LangGraph is a library that extends LangChain by allowing developers to define agentic workflows as stateful graphs. It supports node-level and long-term memory, enabling more complex and persistent agent behaviors.

🔍 Key Features
🔄 Graph-Based Agent Flow
Define agent interactions as nodes in a directed graph (e.g. planning, tool use, reflection).

🧱 Multiple Memory Types

Scratchpad Memory: Short-term context at each node

Global State Memory: Shared long-term memory between nodes

Vector Memory: Semantic recall via embedding stores (e.g., Chroma, Weaviate)

🔧 Customizable Execution Control
Use conditional edges to control flow based on memory, output, or token usage.

🧩 Tool Integration
Each node can invoke tools, access memory, or perform summarization.

<Code>
flowchart TD
    A[User Input] --> B[Input Node]
    B --> C[Planner Node]
    
    C --> D[Tool Use Node]
    C --> E[Reflect Node]
    C --> F[Summarize Node]
    C --> G[End Node]

    subgraph Global Memory Store
        M1[Reads/Writes Memory]
    end

    D --> M1
    E --> M1
    F --> M1
    G --> M1

    click A "https://www.deeplearning.ai/short-courses/long-term-agentic-memory-with-langgraph/" _blank

    %% Annotations
    C:::note

    classDef note fill:#f9f,stroke:#333,stroke-width:1px;
</code>
