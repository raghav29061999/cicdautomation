This slide demonstrates that Strands is enterprise-ready and designed to fit seamlessly into our existing AWS environment. For compute, the agentic core can run on Lambda, ECS, or EKS depending on workload needs. For state and memory, we use DynamoDB for durability and ElastiCache for speed. Identity is handled with IAM, and sensitive data is secured with KMS. At the inference layer, Amazon Bedrock gives us managed access to leading language models, keeping the stack simple and secure. For search and indexing, OpenSearch supports RAG workflows.

The key takeaway is that Strands isn’t a black box—it maps directly to well-known AWS services, aligns with our security standards, and remains portable across clouds, ensuring flexibility and future-proofing.



Strands Component

AWS Service

Rationale

Agentic Core / Compute

AWS Lambda / ECS / EKS

Provides flexible, scalable, and resilient compute for different agent workloads.

Data & Tooling Storage

Amazon S3

Highly durable, scalable, and cost-effective object storage for logs, data, and artifacts.

State & Memory (MCP)

Amazon DynamoDB / ElastiCache

DynamoDB for persistent, low-latency state. ElastiCache for high-speed, transient caching.

Identity & Access

IAM & KMS

Manages fine-grained access to resources and secures sensitive data with cryptographic keys.

Inference Layer

Amazon Bedrock

Provides a managed service for accessing a wide range of foundation models, abstracting complexity.

Search & Indexing

Amazon OpenSearch

A scalable service for building and managing indexes for semantic search and retrieval.

Networking

VPC & Private Endpoints

Creates a secure and isolated network environment for all services and data.



High-Level Reference Architecture
graph TD
    subgraph "External Systems"
        A[User Interface / APIs]
        B[External Data Sources]
    end

    subgraph "Strands on AWS"
        subgraph "Network"
            VPC[AWS VPC]
            NLB[Network Load Balancer]
        end

        subgraph "Application Layer"
            Compute(Lambda / ECS / EKS)
            Bedrock{{Bedrock / LLMs}}
        end

        subgraph "Data & State Layer"
            Storage[S3]
            DynamoDB[DynamoDB / ElastiCache]
            OpenSearch[OpenSearch]
        end

        A -- HTTPS --> VPC
        NLB -- Routes to --> Compute
        Compute -- "Retrieval" --> OpenSearch
        Compute -- "Inference" --> Bedrock
        Compute -- "State/Context" --> DynamoDB
        Compute -- "Logging/Storage" --> Storage
        B -- "Ingest" --> Storage
    end

    subgraph "Governance & Security"
        IAM(IAM)
        KMS(KMS)
        IAM & KMS -- Controls Access --> Strands
    end

    style VPC fill:#87CEEB,stroke:#333
    style Bedrock fill:#FFD700,stroke:#333
